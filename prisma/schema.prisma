generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String?
  email       String   @unique
  clerkUserId String   @unique
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@map("users")
}

model CourseTag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id])

  @@map("course_tags")
}

enum CourseStatus {
  DRAFT
  PUBLISHED
}

enum CourseDifficulty {
  EASY
  MEDIUM
  HARD
}

model Course {
  id               String           @id @default(cuid())
  status           CourseStatus     @default(DRAFT)
  title            String
  slug             String           @unique
  description      String
  shortDescription String?
  thumbnail        String
  price            Float
  discountPrice    Float?
  tags             CourseTag[]
  difficulty       CourseDifficulty @default(EASY)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt()

  // Um curso pode ter v치rios m칩dulos
  modules CourseModule[]

  @@map("courses")
}

model CourseModule {
  id          String   @id @default(cuid())
  title       String
  description String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Um m칩dulo pode ter v치rias aulas
  lessons CourseLesson[]

  @@map("course_modules")
}

model CourseLesson {
  id           String   @id @default(cuid())
  title        String
  description  String
  videoId      String
  durationInMs Int
  order        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()

  moduleId String
  module   CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("course_lessons")
}
